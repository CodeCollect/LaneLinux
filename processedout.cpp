#include <cmath>
#include <math.h>
#include "rt_nonfinite.h"
#include "processedout.h"
#include "polyfit.h"
#include "processedout_emxutil.h"
#include "ImageTestFunction.h"
#include "VideoProcess.h"
#include "morphopAlgo.h"
#include "bwareaopen.h"
#include "processedout_data.h"

static double rt_powd_snf(double u0, double u1);
static double rt_powd_snf(double u0, double u1)
{
  double y;
  double d0;
  double d1;
  if (rtIsNaN(u0) || rtIsNaN(u1)) {
    y = rtNaN;
  } else {
    d0 = std::abs(u0);
    d1 = std::abs(u1);
    if (rtIsInf(u1)) {
      if (d0 == 1.0) {
        y = 1.0;
      } else if (d0 > 1.0) {
        if (u1 > 0.0) {
          y = rtInf;
        } else {
          y = 0.0;
        }
      } else if (u1 > 0.0) {
        y = 0.0;
      } else {
        y = rtInf;
      }
    } else if (d1 == 0.0) {
      y = 1.0;
    } else if (d1 == 1.0) {
      if (u1 > 0.0) {
        y = u0;
      } else {
        y = 1.0 / u0;
      }
    } else if (u1 == 2.0) {
      y = u0 * u0;
    } else if ((u1 == 0.5) && (u0 >= 0.0)) {
      y = std::sqrt(u0);
    } else if ((u0 < 0.0) && (u1 > std::floor(u1))) {
      y = rtNaN;
    } else {
      y = pow(u0, u1);
    }
  }

  return y;
}

void processedout(const emxArray_uint8_T *Binaryimage, double PointsA[720],
                  double PointsB[720], double *AlertSide, double center_data[],
                  int center_size[1], double *left_curvature, double
                  *right_curveature)
{
  emxArray_boolean_T *binary_strel;
  emxArray_uint8_T *binary_image;
  emxArray_boolean_T *B;
  int ii;
  int idx;
  double left_fit_cr[3];
  double right_fit_cr[3];
  double y;
  double x[10];
  static const double b[10] = { 0.0, 4.9382716049382722, 19.753086419753089,
    44.44444444444445, 79.012345679012356, 123.45679012345678, 177.7777777777778,
    241.97530864197535, 316.04938271604942, 400.0 };

  int jj;
  static const double dv0[360] = { 0.083333333333333329, 0.16666666666666666,
    0.25, 0.33333333333333331, 0.41666666666666663, 0.5, 0.58333333333333326,
    0.66666666666666663, 0.75, 0.83333333333333326, 0.91666666666666663, 1.0,
    1.0833333333333333, 1.1666666666666665, 1.25, 1.3333333333333333,
    1.4166666666666665, 1.5, 1.5833333333333333, 1.6666666666666665, 1.75,
    1.8333333333333333, 1.9166666666666665, 2.0, 2.083333333333333,
    2.1666666666666665, 2.25, 2.333333333333333, 2.4166666666666665, 2.5,
    2.583333333333333, 2.6666666666666665, 2.75, 2.833333333333333,
    2.9166666666666665, 3.0, 3.083333333333333, 3.1666666666666665, 3.25,
    3.333333333333333, 3.4166666666666665, 3.5, 3.583333333333333,
    3.6666666666666665, 3.75, 3.833333333333333, 3.9166666666666665, 4.0,
    4.083333333333333, 4.1666666666666661, 4.25, 4.333333333333333,
    4.4166666666666661, 4.5, 4.583333333333333, 4.6666666666666661, 4.75,
    4.833333333333333, 4.9166666666666661, 5.0, 5.083333333333333,
    5.1666666666666661, 5.25, 5.333333333333333, 5.4166666666666661, 5.5,
    5.583333333333333, 5.6666666666666661, 5.75, 5.833333333333333,
    5.9166666666666661, 6.0, 6.083333333333333, 6.1666666666666661, 6.25,
    6.333333333333333, 6.4166666666666661, 6.5, 6.583333333333333,
    6.6666666666666661, 6.75, 6.833333333333333, 6.9166666666666661, 7.0,
    7.083333333333333, 7.1666666666666661, 7.25, 7.333333333333333,
    7.4166666666666661, 7.5, 7.583333333333333, 7.6666666666666661, 7.75,
    7.833333333333333, 7.9166666666666661, 8.0, 8.0833333333333321,
    8.1666666666666661, 8.25, 8.3333333333333321, 8.4166666666666661, 8.5,
    8.5833333333333321, 8.6666666666666661, 8.75, 8.8333333333333321,
    8.9166666666666661, 9.0, 9.0833333333333321, 9.1666666666666661, 9.25,
    9.3333333333333321, 9.4166666666666661, 9.5, 9.5833333333333321,
    9.6666666666666661, 9.75, 9.8333333333333321, 9.9166666666666661, 10.0,
    10.083333333333332, 10.166666666666666, 10.25, 10.333333333333332,
    10.416666666666666, 10.5, 10.583333333333332, 10.666666666666666, 10.75,
    10.833333333333332, 10.916666666666666, 11.0, 11.083333333333332,
    11.166666666666666, 11.25, 11.333333333333332, 11.416666666666666, 11.5,
    11.583333333333332, 11.666666666666666, 11.75, 11.833333333333332,
    11.916666666666666, 12.0, 12.083333333333332, 12.166666666666666, 12.25,
    12.333333333333332, 12.416666666666666, 12.5, 12.583333333333332,
    12.666666666666666, 12.75, 12.833333333333332, 12.916666666666666, 13.0,
    13.083333333333332, 13.166666666666666, 13.25, 13.333333333333332,
    13.416666666666666, 13.5, 13.583333333333332, 13.666666666666666, 13.75,
    13.833333333333332, 13.916666666666666, 14.0, 14.083333333333332,
    14.166666666666666, 14.25, 14.333333333333332, 14.416666666666666, 14.5,
    14.583333333333332, 14.666666666666666, 14.75, 14.833333333333332,
    14.916666666666666, 15.0, 15.083333333333332, 15.166666666666666, 15.25,
    15.333333333333332, 15.416666666666666, 15.5, 15.583333333333332,
    15.666666666666666, 15.75, 15.833333333333332, 15.916666666666666, 16.0,
    16.083333333333332, 16.166666666666664, 16.25, 16.333333333333332,
    16.416666666666664, 16.5, 16.583333333333332, 16.666666666666664, 16.75,
    16.833333333333332, 16.916666666666664, 17.0, 17.083333333333332,
    17.166666666666664, 17.25, 17.333333333333332, 17.416666666666664, 17.5,
    17.583333333333332, 17.666666666666664, 17.75, 17.833333333333332,
    17.916666666666664, 18.0, 18.083333333333332, 18.166666666666664, 18.25,
    18.333333333333332, 18.416666666666664, 18.5, 18.583333333333332,
    18.666666666666664, 18.75, 18.833333333333332, 18.916666666666664, 19.0,
    19.083333333333332, 19.166666666666664, 19.25, 19.333333333333332,
    19.416666666666664, 19.5, 19.583333333333332, 19.666666666666664, 19.75,
    19.833333333333332, 19.916666666666664, 20.0, 20.083333333333332,
    20.166666666666664, 20.25, 20.333333333333332, 20.416666666666664, 20.5,
    20.583333333333332, 20.666666666666664, 20.75, 20.833333333333332,
    20.916666666666664, 21.0, 21.083333333333332, 21.166666666666664, 21.25,
    21.333333333333332, 21.416666666666664, 21.5, 21.583333333333332,
    21.666666666666664, 21.75, 21.833333333333332, 21.916666666666664, 22.0,
    22.083333333333332, 22.166666666666664, 22.25, 22.333333333333332,
    22.416666666666664, 22.5, 22.583333333333332, 22.666666666666664, 22.75,
    22.833333333333332, 22.916666666666664, 23.0, 23.083333333333332,
    23.166666666666664, 23.25, 23.333333333333332, 23.416666666666664, 23.5,
    23.583333333333332, 23.666666666666664, 23.75, 23.833333333333332,
    23.916666666666664, 24.0, 24.083333333333332, 24.166666666666664, 24.25,
    24.333333333333332, 24.416666666666664, 24.5, 24.583333333333332,
    24.666666666666664, 24.75, 24.833333333333332, 24.916666666666664, 25.0,
    25.083333333333332, 25.166666666666664, 25.25, 25.333333333333332,
    25.416666666666664, 25.5, 25.583333333333332, 25.666666666666664, 25.75,
    25.833333333333332, 25.916666666666664, 26.0, 26.083333333333332,
    26.166666666666664, 26.25, 26.333333333333332, 26.416666666666664, 26.5,
    26.583333333333332, 26.666666666666664, 26.75, 26.833333333333332,
    26.916666666666664, 27.0, 27.083333333333332, 27.166666666666664, 27.25,
    27.333333333333332, 27.416666666666664, 27.5, 27.583333333333332,
    27.666666666666664, 27.75, 27.833333333333332, 27.916666666666664, 28.0,
    28.083333333333332, 28.166666666666664, 28.25, 28.333333333333332,
    28.416666666666664, 28.5, 28.583333333333332, 28.666666666666664, 28.75,
    28.833333333333332, 28.916666666666664, 29.0, 29.083333333333332,
    29.166666666666664, 29.25, 29.333333333333332, 29.416666666666664, 29.5,
    29.583333333333332, 29.666666666666664, 29.75, 29.833333333333332,
    29.916666666666664, 30.0 };

  double left_fitx[360];
  static const int b_b[360] = { 1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144,
    169, 196, 225, 256, 289, 324, 361, 400, 441, 484, 529, 576, 625, 676, 729,
    784, 841, 900, 961, 1024, 1089, 1156, 1225, 1296, 1369, 1444, 1521, 1600,
    1681, 1764, 1849, 1936, 2025, 2116, 2209, 2304, 2401, 2500, 2601, 2704, 2809,
    2916, 3025, 3136, 3249, 3364, 3481, 3600, 3721, 3844, 3969, 4096, 4225, 4356,
    4489, 4624, 4761, 4900, 5041, 5184, 5329, 5476, 5625, 5776, 5929, 6084, 6241,
    6400, 6561, 6724, 6889, 7056, 7225, 7396, 7569, 7744, 7921, 8100, 8281, 8464,
    8649, 8836, 9025, 9216, 9409, 9604, 9801, 10000, 10201, 10404, 10609, 10816,
    11025, 11236, 11449, 11664, 11881, 12100, 12321, 12544, 12769, 12996, 13225,
    13456, 13689, 13924, 14161, 14400, 14641, 14884, 15129, 15376, 15625, 15876,
    16129, 16384, 16641, 16900, 17161, 17424, 17689, 17956, 18225, 18496, 18769,
    19044, 19321, 19600, 19881, 20164, 20449, 20736, 21025, 21316, 21609, 21904,
    22201, 22500, 22801, 23104, 23409, 23716, 24025, 24336, 24649, 24964, 25281,
    25600, 25921, 26244, 26569, 26896, 27225, 27556, 27889, 28224, 28561, 28900,
    29241, 29584, 29929, 30276, 30625, 30976, 31329, 31684, 32041, 32400, 32761,
    33124, 33489, 33856, 34225, 34596, 34969, 35344, 35721, 36100, 36481, 36864,
    37249, 37636, 38025, 38416, 38809, 39204, 39601, 40000, 40401, 40804, 41209,
    41616, 42025, 42436, 42849, 43264, 43681, 44100, 44521, 44944, 45369, 45796,
    46225, 46656, 47089, 47524, 47961, 48400, 48841, 49284, 49729, 50176, 50625,
    51076, 51529, 51984, 52441, 52900, 53361, 53824, 54289, 54756, 55225, 55696,
    56169, 56644, 57121, 57600, 58081, 58564, 59049, 59536, 60025, 60516, 61009,
    61504, 62001, 62500, 63001, 63504, 64009, 64516, 65025, 65536, 66049, 66564,
    67081, 67600, 68121, 68644, 69169, 69696, 70225, 70756, 71289, 71824, 72361,
    72900, 73441, 73984, 74529, 75076, 75625, 76176, 76729, 77284, 77841, 78400,
    78961, 79524, 80089, 80656, 81225, 81796, 82369, 82944, 83521, 84100, 84681,
    85264, 85849, 86436, 87025, 87616, 88209, 88804, 89401, 90000, 90601, 91204,
    91809, 92416, 93025, 93636, 94249, 94864, 95481, 96100, 96721, 97344, 97969,
    98596, 99225, 99856, 100489, 101124, 101761, 102400, 103041, 103684, 104329,
    104976, 105625, 106276, 106929, 107584, 108241, 108900, 109561, 110224,
    110889, 111556, 112225, 112896, 113569, 114244, 114921, 115600, 116281,
    116964, 117649, 118336, 119025, 119716, 120409, 121104, 121801, 122500,
    123201, 123904, 124609, 125316, 126025, 126736, 127449, 128164, 128881,
    129600 };

  double right_fitx;
  double b_right_fitx[360];
  bool exitg1;
  double v_data[1];
  bool b_y;
  bool x_data[1];
  emxInit_boolean_T(&binary_strel, 2);
  emxInit_uint8_T(&binary_image, 2);
  emxInit_boolean_T(&B, 2);
  bwareaopen(Binaryimage, binary_strel);
  ii = B->size[0] * B->size[1];
  B->size[0] = binary_strel->size[0];
  B->size[1] = binary_strel->size[1];
  emxEnsureCapacity_boolean_T(B, ii);
  morphopAlgo(binary_strel, B);
  ii = binary_image->size[0] * binary_image->size[1];
  binary_image->size[0] = B->size[0];
  binary_image->size[1] = B->size[1];
  emxEnsureCapacity_uint8_T(binary_image, ii);
  idx = B->size[0] * B->size[1];
  emxFree_boolean_T(&binary_strel);
  for (ii = 0; ii < idx; ii++) {
    binary_image->data[ii] = (unsigned char)(B->data[ii] * 255U);
  }

  emxFree_boolean_T(&B);
  if (counter == 500.0) {
    counter = 0.0;
    ImageTestFunction(binary_image, left_fit, right_fit);
    for (ii = 0; ii < 3; ii++) {
      last_left[ii] = left_fit[ii];
      last_right[ii] = right_fit[ii];
    }
  } else {
    VideoProcess(binary_image, left_fit, right_fit, left_fit_cr, right_fit_cr);
    for (ii = 0; ii < 3; ii++) {
      left_fit[ii] = left_fit_cr[ii];
      right_fit[ii] = right_fit_cr[ii];
    }
  }

  emxFree_uint8_T(&binary_image);
  for (ii = 0; ii < 10; ii++) {
    x[ii] = ((right_fit[0] * b[ii] + right_fit[1] * (2.2222222222222223 *
               (double)ii)) + right_fit[2]) - ((left_fit[0] * b[ii] + left_fit[1]
      * (2.2222222222222223 * (double)ii)) + left_fit[2]);
  }

  y = x[0];
  for (idx = 0; idx < 9; idx++) {
    y += x[idx + 1];
  }

  if ((std::abs((2.0 * left_fit[0] + left_fit[1]) - (2.0 * right_fit[0] +
         right_fit[1])) <= 0.9) && (std::abs((2.0 * left_fit[0] * 360.0 +
         left_fit[1]) - (2.0 * right_fit[0] * 360.0 + right_fit[1])) <= 0.9) &&
      (std::abs((2.0 * right_fit[0] * 180.0 + right_fit[1]) - (2.0 * left_fit[0]
         * 180.0 + left_fit[1])) <= 0.9) && (y / 10.0 > 75.0)) {
    for (ii = 0; ii < 3; ii++) {
      last_left[ii] = left_fit[ii];
      last_right[ii] = right_fit[ii];
    }

    counter++;
  } else {
    for (ii = 0; ii < 3; ii++) {
      left_fit[ii] = last_left[ii];
      right_fit[ii] = last_right[ii];
    }
  }

  jj = 1;
  for (idx = 0; idx < 359; idx++) {
    if (jj < idx + 2) {
      jj = idx + 2;
    }
  }

  for (ii = 0; ii < 360; ii++) {
    y = (left_fit[0] * (double)b_b[ii] + left_fit[1] * (1.0 + (double)ii)) +
      left_fit[2];
    right_fitx = (right_fit[0] * (double)b_b[ii] + right_fit[1] * (1.0 + (double)
      ii)) + right_fit[2];
    PointsA[ii] = y;
    PointsA[360 + ii] = 1.0 + (double)ii;
    PointsB[ii] = right_fitx;
    PointsB[360 + ii] = 1.0 + (double)ii;
    left_fitx[ii] = y * 0.010571428571428572;
    b_right_fitx[ii] = right_fitx;
  }

  b_polyfit(dv0, left_fitx, left_fit_cr);
  for (ii = 0; ii < 360; ii++) {
    left_fitx[ii] = b_right_fitx[ii] * 0.010571428571428572;
  }

  b_polyfit(dv0, left_fitx, right_fit_cr);
  y = 2.0 * left_fit_cr[0] * (double)jj * 0.083333333333333329 + left_fit_cr[1];
  *left_curvature = rt_powd_snf(1.0 + y * y, 1.5) / std::abs(2.0 * left_fit_cr[0]);
  y = 2.0 * right_fit_cr[0] * (double)jj * 0.083333333333333329 + right_fit_cr[1];
  *right_curveature = rt_powd_snf(1.0 + y * y, 1.5) / std::abs(2.0 *
    right_fit_cr[0]);
  idx = 0;
  center_size[0] = 1;
  ii = 359;
  jj = 1;
  exitg1 = false;
  while ((!exitg1) && (jj > 0)) {
    if (PointsA[ii] != 0.0) {
      idx = 1;
      center_data[0] = PointsA[ii];
      exitg1 = true;
    } else {
      ii--;
      if (ii + 1 < 1) {
        ii = 359;
        jj = 0;
      }
    }
  }

  if (idx == 0) {
    center_size[0] = 0;
  }

  ii = 359;
  jj = 1;
  exitg1 = false;
  while ((!exitg1) && (jj > 0)) {
    if (PointsB[ii] != 0.0) {
      v_data[0] = PointsB[ii];
      exitg1 = true;
    } else {
      ii--;
      if (ii + 1 < 1) {
        ii = 359;
        jj = 0;
      }
    }
  }

  idx = center_size[0];
  for (ii = 0; ii < idx; ii++) {
    center_data[ii] = ((center_data[ii] + v_data[ii]) / 2.0 - 320.0) *
      0.010571428571428572;
  }

  idx = center_size[0];
  for (ii = 0; ii < idx; ii++) {
    x_data[ii] = (center_data[ii] < 0.0);
  }

  b_y = !(center_size[0] == 0);
  if (b_y) {
    idx = 1;
    exitg1 = false;
    while ((!exitg1) && (idx <= center_size[0])) {
      if (!x_data[0]) {
        b_y = false;
        exitg1 = true;
      } else {
        idx = 2;
      }
    }
  }

  if (b_y) {
    *AlertSide = 1.0;
  } else {
    *AlertSide = 2.0;
  }
}
